// Code generated by go-swagger; DO NOT EDIT.

package rtldmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BaseProfileDto base profile dto
//
// swagger:model BaseProfileDto
type BaseProfileDto struct {
	DeliveryMethodSettingDto

	// at id
	AtID string `json:"@id,omitempty"`

	// at type
	AtType string `json:"@type,omitempty"`

	// account number
	AccountNumber string `json:"account_number,omitempty"`

	// created by
	CreatedBy string `json:"created_by,omitempty"`

	// created on
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

	// delivery method
	DeliveryMethod string `json:"delivery_method,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// downsampling rate
	DownsamplingRate float64 `json:"downsampling_rate,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// fields
	Fields []string `json:"fields"`

	// id
	ID int32 `json:"id,omitempty"`

	// last modified on
	// Format: date-time
	LastModifiedOn strfmt.DateTime `json:"last_modified_on,omitempty"`

	// log format
	LogFormat string `json:"log_format,omitempty"`

	// profile name
	ProfileName string `json:"profile_name,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *BaseProfileDto) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 DeliveryMethodSettingDto
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.DeliveryMethodSettingDto = aO0

	// AO1
	var dataAO1 struct {
		AtID string `json:"@id,omitempty"`

		AtType string `json:"@type,omitempty"`

		AccountNumber string `json:"account_number,omitempty"`

		CreatedBy string `json:"created_by,omitempty"`

		CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

		DeliveryMethod string `json:"delivery_method,omitempty"`

		Description string `json:"description,omitempty"`

		DownsamplingRate float64 `json:"downsampling_rate,omitempty"`

		Enabled bool `json:"enabled,omitempty"`

		Fields []string `json:"fields"`

		ID int32 `json:"id,omitempty"`

		LastModifiedOn strfmt.DateTime `json:"last_modified_on,omitempty"`

		LogFormat string `json:"log_format,omitempty"`

		ProfileName string `json:"profile_name,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AtID = dataAO1.AtID

	m.AtType = dataAO1.AtType

	m.AccountNumber = dataAO1.AccountNumber

	m.CreatedBy = dataAO1.CreatedBy

	m.CreatedOn = dataAO1.CreatedOn

	m.DeliveryMethod = dataAO1.DeliveryMethod

	m.Description = dataAO1.Description

	m.DownsamplingRate = dataAO1.DownsamplingRate

	m.Enabled = dataAO1.Enabled

	m.Fields = dataAO1.Fields

	m.ID = dataAO1.ID

	m.LastModifiedOn = dataAO1.LastModifiedOn

	m.LogFormat = dataAO1.LogFormat

	m.ProfileName = dataAO1.ProfileName

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m BaseProfileDto) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.DeliveryMethodSettingDto)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AtID string `json:"@id,omitempty"`

		AtType string `json:"@type,omitempty"`

		AccountNumber string `json:"account_number,omitempty"`

		CreatedBy string `json:"created_by,omitempty"`

		CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

		DeliveryMethod string `json:"delivery_method,omitempty"`

		Description string `json:"description,omitempty"`

		DownsamplingRate float64 `json:"downsampling_rate,omitempty"`

		Enabled bool `json:"enabled,omitempty"`

		Fields []string `json:"fields"`

		ID int32 `json:"id,omitempty"`

		LastModifiedOn strfmt.DateTime `json:"last_modified_on,omitempty"`

		LogFormat string `json:"log_format,omitempty"`

		ProfileName string `json:"profile_name,omitempty"`
	}

	dataAO1.AtID = m.AtID

	dataAO1.AtType = m.AtType

	dataAO1.AccountNumber = m.AccountNumber

	dataAO1.CreatedBy = m.CreatedBy

	dataAO1.CreatedOn = m.CreatedOn

	dataAO1.DeliveryMethod = m.DeliveryMethod

	dataAO1.Description = m.Description

	dataAO1.DownsamplingRate = m.DownsamplingRate

	dataAO1.Enabled = m.Enabled

	dataAO1.Fields = m.Fields

	dataAO1.ID = m.ID

	dataAO1.LastModifiedOn = m.LastModifiedOn

	dataAO1.LogFormat = m.LogFormat

	dataAO1.ProfileName = m.ProfileName

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this base profile dto
func (m *BaseProfileDto) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DeliveryMethodSettingDto
	if err := m.DeliveryMethodSettingDto.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseProfileDto) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BaseProfileDto) validateLastModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified_on", "body", "date-time", m.LastModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this base profile dto based on the context it is used
func (m *BaseProfileDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with DeliveryMethodSettingDto
	if err := m.DeliveryMethodSettingDto.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *BaseProfileDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseProfileDto) UnmarshalBinary(b []byte) error {
	var res BaseProfileDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
