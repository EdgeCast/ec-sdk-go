// Code generated by go-swagger; DO NOT EDIT.

package rtldmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RtldWafFiltersDto rtld waf filters dto
//
// swagger:model RtldWafFiltersDto
type RtldWafFiltersDto struct {
	BaseRtldFiltersDto

	// acl config name
	ACLConfigName []string `json:"acl_config_name"`

	// country code
	CountryCode []string `json:"country_code"`

	// country code condition
	CountryCodeCondition FilterConditions `json:"country_code_condition,omitempty"`

	// rules config name
	RulesConfigName []string `json:"rules_config_name"`

	// scope config name
	ScopeConfigName []string `json:"scope_config_name"`

	// user agent regexp
	UserAgentRegexp string `json:"user_agent_regexp,omitempty"`

	// waf profile name
	WafProfileName []string `json:"waf_profile_name"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RtldWafFiltersDto) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseRtldFiltersDto
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseRtldFiltersDto = aO0

	// AO1
	var dataAO1 struct {
		ACLConfigName []string `json:"acl_config_name"`

		CountryCode []string `json:"country_code"`

		CountryCodeCondition FilterConditions `json:"country_code_condition,omitempty"`

		RulesConfigName []string `json:"rules_config_name"`

		ScopeConfigName []string `json:"scope_config_name"`

		UserAgentRegexp string `json:"user_agent_regexp,omitempty"`

		WafProfileName []string `json:"waf_profile_name"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ACLConfigName = dataAO1.ACLConfigName

	m.CountryCode = dataAO1.CountryCode

	m.CountryCodeCondition = dataAO1.CountryCodeCondition

	m.RulesConfigName = dataAO1.RulesConfigName

	m.ScopeConfigName = dataAO1.ScopeConfigName

	m.UserAgentRegexp = dataAO1.UserAgentRegexp

	m.WafProfileName = dataAO1.WafProfileName

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RtldWafFiltersDto) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseRtldFiltersDto)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ACLConfigName []string `json:"acl_config_name"`

		CountryCode []string `json:"country_code"`

		CountryCodeCondition FilterConditions `json:"country_code_condition,omitempty"`

		RulesConfigName []string `json:"rules_config_name"`

		ScopeConfigName []string `json:"scope_config_name"`

		UserAgentRegexp string `json:"user_agent_regexp,omitempty"`

		WafProfileName []string `json:"waf_profile_name"`
	}

	dataAO1.ACLConfigName = m.ACLConfigName

	dataAO1.CountryCode = m.CountryCode

	dataAO1.CountryCodeCondition = m.CountryCodeCondition

	dataAO1.RulesConfigName = m.RulesConfigName

	dataAO1.ScopeConfigName = m.ScopeConfigName

	dataAO1.UserAgentRegexp = m.UserAgentRegexp

	dataAO1.WafProfileName = m.WafProfileName

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rtld waf filters dto
func (m *RtldWafFiltersDto) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseRtldFiltersDto
	if err := m.BaseRtldFiltersDto.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCodeCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RtldWafFiltersDto) validateCountryCodeCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.CountryCodeCondition) { // not required
		return nil
	}

	if err := m.CountryCodeCondition.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("country_code_condition")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("country_code_condition")
		}
		return err
	}

	return nil
}

// ContextValidate validate this rtld waf filters dto based on the context it is used
func (m *RtldWafFiltersDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseRtldFiltersDto
	if err := m.BaseRtldFiltersDto.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCountryCodeCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RtldWafFiltersDto) contextValidateCountryCodeCondition(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CountryCodeCondition.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("country_code_condition")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("country_code_condition")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RtldWafFiltersDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RtldWafFiltersDto) UnmarshalBinary(b []byte) error {
	var res RtldWafFiltersDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
