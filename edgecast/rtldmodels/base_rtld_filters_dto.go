// Code generated by go-swagger; DO NOT EDIT.

package rtldmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BaseRtldFiltersDto base rtld filters dto
//
// swagger:model BaseRtldFiltersDto
type BaseRtldFiltersDto struct {

	// cnames
	Cnames []string `json:"cnames"`

	// cnames condition
	CnamesCondition FilterConditions `json:"cnames_condition,omitempty"`
}

// Validate validates this base rtld filters dto
func (m *BaseRtldFiltersDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCnamesCondition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseRtldFiltersDto) validateCnamesCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.CnamesCondition) { // not required
		return nil
	}

	if err := m.CnamesCondition.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cnames_condition")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cnames_condition")
		}
		return err
	}

	return nil
}

// ContextValidate validate this base rtld filters dto based on the context it is used
func (m *BaseRtldFiltersDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCnamesCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BaseRtldFiltersDto) contextValidateCnamesCondition(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CnamesCondition.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cnames_condition")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cnames_condition")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BaseRtldFiltersDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseRtldFiltersDto) UnmarshalBinary(b []byte) error {
	var res BaseRtldFiltersDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
