// Copyright 2021 Edgecast Inc., Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms.

package profiles_cdn

// This file was generated by codegen-sdk-go.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
)

// New creates a new profiles cdn API client.
func New(c ecclient.APIClient, baseAPIURL string) ClientService {
	return &Client{c, baseAPIURL}
}

/*
Client for profiles cdn API
*/
type Client struct {
	client     ecclient.APIClient
	baseAPIURL string
}

// ClientService is the interface for Client methods
type ClientService interface {
	ProfilesAddCustomerSetting(params *ProfilesAddCustomerSettingParams) (*ProfilesAddCustomerSettingOK, error)

	ProfilesDeleteCustomerSettingsByID(params *ProfilesDeleteCustomerSettingsByIDParams) (*ProfilesDeleteCustomerSettingsByIDNoContent, error)

	ProfilesGetCustomerSettings(params *ProfilesGetCustomerSettingsParams) (*ProfilesGetCustomerSettingsOK, error)

	ProfilesGetCustomerSettingsByID(params *ProfilesGetCustomerSettingsByIDParams) (*ProfilesGetCustomerSettingsByIDOK, error)

	ProfilesUpdateCustomerSetting(params *ProfilesUpdateCustomerSettingParams) (*ProfilesUpdateCustomerSettingOK, error)
}

/*
  ProfilesAddCustomerSetting profiles add customer setting API
*/
func (a *Client) ProfilesAddCustomerSetting(params *ProfilesAddCustomerSettingParams) (*ProfilesAddCustomerSettingOK, error) {
	// Validate the params before sending
	if params == nil {
		params = NewProfilesAddCustomerSettingParams()
	}

	//Set parameters
	results, err := WriteToRequestProfilesAddCustomerSettingParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("POST")
	if err != nil {
		return nil, fmt.Errorf("ProfilesAddCustomerSetting: %v", err)
	}

	parsedResponse := &ProfilesAddCustomerSettingOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v1.0/cdn/profiles",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("ProfilesAddCustomerSetting: %v", err)
	}

	return parsedResponse, nil
}

/*
  ProfilesDeleteCustomerSettingsByID profiles delete customer settings by Id API
*/
func (a *Client) ProfilesDeleteCustomerSettingsByID(params *ProfilesDeleteCustomerSettingsByIDParams) (*ProfilesDeleteCustomerSettingsByIDNoContent, error) {
	// Validate the params before sending
	if params == nil {
		params = NewProfilesDeleteCustomerSettingsByIDParams()
	}

	//Set parameters
	results, err := WriteToRequestProfilesDeleteCustomerSettingsByIDParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("DELETE")
	if err != nil {
		return nil, fmt.Errorf("ProfilesDeleteCustomerSettingsByID: %v", err)
	}

	parsedResponse := &ProfilesDeleteCustomerSettingsByIDNoContent{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v1.0/cdn/profiles/{id}",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("ProfilesDeleteCustomerSettingsByID: %v", err)
	}

	return parsedResponse, nil
}

/*
  ProfilesGetCustomerSettings profiles get customer settings API
*/
func (a *Client) ProfilesGetCustomerSettings(params *ProfilesGetCustomerSettingsParams) (*ProfilesGetCustomerSettingsOK, error) {
	// Validate the params before sending
	if params == nil {
		params = NewProfilesGetCustomerSettingsParams()
	}

	//Set parameters
	results, err := WriteToRequestProfilesGetCustomerSettingsParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("ProfilesGetCustomerSettings: %v", err)
	}

	parsedResponse := &ProfilesGetCustomerSettingsOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v1.0/cdn/profiles",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("ProfilesGetCustomerSettings: %v", err)
	}

	return parsedResponse, nil
}

/*
  ProfilesGetCustomerSettingsByID profiles get customer settings by Id API
*/
func (a *Client) ProfilesGetCustomerSettingsByID(params *ProfilesGetCustomerSettingsByIDParams) (*ProfilesGetCustomerSettingsByIDOK, error) {
	// Validate the params before sending
	if params == nil {
		params = NewProfilesGetCustomerSettingsByIDParams()
	}

	//Set parameters
	results, err := WriteToRequestProfilesGetCustomerSettingsByIDParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("ProfilesGetCustomerSettingsByID: %v", err)
	}

	parsedResponse := &ProfilesGetCustomerSettingsByIDOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v1.0/cdn/profiles/{id}",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("ProfilesGetCustomerSettingsByID: %v", err)
	}

	return parsedResponse, nil
}

/*
  ProfilesUpdateCustomerSetting profiles update customer setting API
*/
func (a *Client) ProfilesUpdateCustomerSetting(params *ProfilesUpdateCustomerSettingParams) (*ProfilesUpdateCustomerSettingOK, error) {
	// Validate the params before sending
	if params == nil {
		params = NewProfilesUpdateCustomerSettingParams()
	}

	//Set parameters
	results, err := WriteToRequestProfilesUpdateCustomerSettingParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("PUT")
	if err != nil {
		return nil, fmt.Errorf("ProfilesUpdateCustomerSetting: %v", err)
	}

	parsedResponse := &ProfilesUpdateCustomerSettingOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v1.0/cdn/profiles/{id}",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("ProfilesUpdateCustomerSetting: %v", err)
	}

	return parsedResponse, nil
}

type RequestParameters struct {
	QueryParams map[string]string
	PathParams  map[string]string
	Body        interface{}
}

func NewRequestParameters() *RequestParameters {
	return &RequestParameters{
		QueryParams: make(map[string]string),
		PathParams:  make(map[string]string),
	}
}
