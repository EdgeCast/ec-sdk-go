// Copyright 2021 Edgecast Inc., Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms.

package profiles_rl

// This file was generated by codegen-sdk-go.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/EdgeCast/ec-sdk-go/edgecast/client"
)

// New creates a new profiles rl API client.
func New(c client.Client) ClientService {
	return &Client{Client: c}
}

/*
Client for profiles rl API
*/
type Client struct {
	client.Client
}

// ClientService is the interface for Client methods
type ClientService interface {
	ProfilesRateLimitingAddCustomerSetting(params *ProfilesRateLimitingAddCustomerSettingParams) (*ProfilesRateLimitingAddCustomerSettingOK, error)

	ProfilesRateLimitingGetCustomerSettings(params *ProfilesRateLimitingGetCustomerSettingsParams) (*ProfilesRateLimitingGetCustomerSettingsOK, error)

	ProfilesRlGetCustomerSettingsByID(params *ProfilesRlGetCustomerSettingsByIDParams) (*ProfilesRlGetCustomerSettingsByIDOK, error)
}

/*
  ProfilesRateLimitingAddCustomerSetting profiles rate limiting add customer setting API
*/
func (a *Client) ProfilesRateLimitingAddCustomerSetting(params *ProfilesRateLimitingAddCustomerSettingParams) (*ProfilesRateLimitingAddCustomerSettingOK, error) {
	// Validate the params before sending
	if params == nil {
		params = NewProfilesRateLimitingAddCustomerSettingParams()
	}

	//Set parameters
	results, err := WriteToRequestProfilesRateLimitingAddCustomerSettingParams(params)
	if err != nil {
		return nil, err
	}

	url := a.Config.BaseAPIURL.String() + "/v1.0/rl/profiles"

	request, err := a.Client.PrepareRequest("POST", url, results.Body, results.QueryParams, results.PathParams)
	if err != nil {
		return nil, fmt.Errorf("ProfilesRateLimitingAddCustomerSetting: %v", err)
	}

	parsedResponse := &ProfilesRateLimitingAddCustomerSettingOK{}

	_, err = a.Client.SendRequest(request, parsedResponse)
	if err != nil {
		return nil, fmt.Errorf("ProfilesRateLimitingAddCustomerSetting: %v", err)
	}

	return parsedResponse, nil
}

/*
  ProfilesRateLimitingGetCustomerSettings profiles rate limiting get customer settings API
*/
func (a *Client) ProfilesRateLimitingGetCustomerSettings(params *ProfilesRateLimitingGetCustomerSettingsParams) (*ProfilesRateLimitingGetCustomerSettingsOK, error) {
	// Validate the params before sending
	if params == nil {
		params = NewProfilesRateLimitingGetCustomerSettingsParams()
	}

	//Set parameters
	results, err := WriteToRequestProfilesRateLimitingGetCustomerSettingsParams(params)
	if err != nil {
		return nil, err
	}

	url := a.Config.BaseAPIURL.String() + "/v1.0/rl/profiles"

	request, err := a.Client.PrepareRequest("GET", url, results.Body, results.QueryParams, results.PathParams)
	if err != nil {
		return nil, fmt.Errorf("ProfilesRateLimitingGetCustomerSettings: %v", err)
	}

	parsedResponse := &ProfilesRateLimitingGetCustomerSettingsOK{}

	_, err = a.Client.SendRequest(request, parsedResponse)
	if err != nil {
		return nil, fmt.Errorf("ProfilesRateLimitingGetCustomerSettings: %v", err)
	}

	return parsedResponse, nil
}

/*
  ProfilesRlGetCustomerSettingsByID profiles rl get customer settings by Id API
*/
func (a *Client) ProfilesRlGetCustomerSettingsByID(params *ProfilesRlGetCustomerSettingsByIDParams) (*ProfilesRlGetCustomerSettingsByIDOK, error) {
	// Validate the params before sending
	if params == nil {
		params = NewProfilesRlGetCustomerSettingsByIDParams()
	}

	//Set parameters
	results, err := WriteToRequestProfilesRlGetCustomerSettingsByIDParams(params)
	if err != nil {
		return nil, err
	}

	url := a.Config.BaseAPIURL.String() + "/v1.0/rl/profiles/{id}"

	request, err := a.Client.PrepareRequest("GET", url, results.Body, results.QueryParams, results.PathParams)
	if err != nil {
		return nil, fmt.Errorf("ProfilesRlGetCustomerSettingsByID: %v", err)
	}

	parsedResponse := &ProfilesRlGetCustomerSettingsByIDOK{}

	_, err = a.Client.SendRequest(request, parsedResponse)
	if err != nil {
		return nil, fmt.Errorf("ProfilesRlGetCustomerSettingsByID: %v", err)
	}

	return parsedResponse, nil
}

type RequestParameters struct {
	QueryParams map[string]string
	PathParams  map[string]string
	Body        interface{}
}

func NewRequestParameters() *RequestParameters {
	return &RequestParameters{
		QueryParams: make(map[string]string),
		PathParams:  make(map[string]string),
	}
}
