// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

package certificate

// This file was generated by codegen-sdk-go.
// Any changes made to this file may be overwritten.

import (
	"fmt"

	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
)

// New creates a new certificate API client.
func New(c ecclient.APIClient, baseAPIURL string) ClientService {
	return &Client{c, baseAPIURL}
}

// Client for certificate API
type Client struct {
	client     ecclient.APIClient
	baseAPIURL string
}

// ClientService is the interface for Client methods
type ClientService interface {
	CertificateCancel(params CertificateCancelParams) (*CertificateCancelNoContent, error)

	CertificateDelete(params CertificateDeleteParams) (*CertificateDeleteNoContent, error)

	CertificateFind(params CertificateFindParams) (*CertificateFindOK, error)

	CertificateGet(params CertificateGetParams) (*CertificateGetOK, error)

	CertificateGetCertificateStatus(params CertificateGetCertificateStatusParams) (*CertificateGetCertificateStatusOK, error)

	CertificateGetRequestNotifications(params CertificateGetRequestNotificationsParams) (*CertificateGetRequestNotificationsOK, error)

	CertificatePatch(params CertificatePatchParams) (*CertificatePatchOK, error)

	CertificatePost(params CertificatePostParams) (*CertificatePostCreated, error)

	CertificatePutOrganizationDetails(params CertificatePutOrganizationDetailsParams) (*CertificatePutOrganizationDetailsOK, error)

	CertificatePutRenewal(params CertificatePutRenewalParams) (*CertificatePutRenewalNoContent, error)

	CertificatePutRetrigger(params CertificatePutRetriggerParams) (*CertificatePutRetriggerNoContent, error)

	CertificateUpdateRequestNotifications(params CertificateUpdateRequestNotificationsParams) (*CertificateUpdateRequestNotificationsOK, error)
}

// CertificateCancel certificate cancel API
func (a *Client) CertificateCancel(params CertificateCancelParams) (*CertificateCancelNoContent, error) {

	// Set parameters
	results, err := WriteToRequestCertificateCancelParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("PUT")
	if err != nil {
		return nil, fmt.Errorf("CertificateCancel: %v", err)
	}

	parsedResponse := &CertificateCancelNoContent{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/certificates/{id}/cancel",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("CertificateCancel: %v", err)
	}

	return parsedResponse, nil
}

// CertificateDelete certificate delete API
func (a *Client) CertificateDelete(params CertificateDeleteParams) (*CertificateDeleteNoContent, error) {

	// Set parameters
	results, err := WriteToRequestCertificateDeleteParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("DELETE")
	if err != nil {
		return nil, fmt.Errorf("CertificateDelete: %v", err)
	}

	parsedResponse := &CertificateDeleteNoContent{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/certificates/{id}",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("CertificateDelete: %v", err)
	}

	return parsedResponse, nil
}

// CertificateFind certificate find API
func (a *Client) CertificateFind(params CertificateFindParams) (*CertificateFindOK, error) {

	// Set parameters
	results, err := WriteToRequestCertificateFindParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("CertificateFind: %v", err)
	}

	parsedResponse := &CertificateFindOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/certificates",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("CertificateFind: %v", err)
	}

	return parsedResponse, nil
}

// CertificateGet certificate get API
func (a *Client) CertificateGet(params CertificateGetParams) (*CertificateGetOK, error) {

	// Set parameters
	results, err := WriteToRequestCertificateGetParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("CertificateGet: %v", err)
	}

	parsedResponse := &CertificateGetOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/certificates/{id}",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("CertificateGet: %v", err)
	}

	return parsedResponse, nil
}

// CertificateGetCertificateStatus certificate get certificate status API
func (a *Client) CertificateGetCertificateStatus(params CertificateGetCertificateStatusParams) (*CertificateGetCertificateStatusOK, error) {

	// Set parameters
	results, err := WriteToRequestCertificateGetCertificateStatusParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("CertificateGetCertificateStatus: %v", err)
	}

	parsedResponse := &CertificateGetCertificateStatusOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/certificates/{id}/status",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("CertificateGetCertificateStatus: %v", err)
	}

	return parsedResponse, nil
}

// CertificateGetRequestNotifications certificate get request notifications API
func (a *Client) CertificateGetRequestNotifications(params CertificateGetRequestNotificationsParams) (*CertificateGetRequestNotificationsOK, error) {

	// Set parameters
	results, err := WriteToRequestCertificateGetRequestNotificationsParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("CertificateGetRequestNotifications: %v", err)
	}

	parsedResponse := &CertificateGetRequestNotificationsOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/certificates/{id}/notifications",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("CertificateGetRequestNotifications: %v", err)
	}

	return parsedResponse, nil
}

// CertificatePatch certificate patch API
func (a *Client) CertificatePatch(params CertificatePatchParams) (*CertificatePatchOK, error) {

	// Set parameters
	results, err := WriteToRequestCertificatePatchParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("PATCH")
	if err != nil {
		return nil, fmt.Errorf("CertificatePatch: %v", err)
	}

	parsedResponse := &CertificatePatchOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/certificates/{id}",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("CertificatePatch: %v", err)
	}

	return parsedResponse, nil
}

// CertificatePost certificate post API
func (a *Client) CertificatePost(params CertificatePostParams) (*CertificatePostCreated, error) {

	// Set parameters
	results, err := WriteToRequestCertificatePostParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("POST")
	if err != nil {
		return nil, fmt.Errorf("CertificatePost: %v", err)
	}

	parsedResponse := &CertificatePostCreated{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/certificates/cdnprovided",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("CertificatePost: %v", err)
	}

	return parsedResponse, nil
}

// CertificatePutOrganizationDetails certificate put organization details API
func (a *Client) CertificatePutOrganizationDetails(params CertificatePutOrganizationDetailsParams) (*CertificatePutOrganizationDetailsOK, error) {

	// Set parameters
	results, err := WriteToRequestCertificatePutOrganizationDetailsParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("PUT")
	if err != nil {
		return nil, fmt.Errorf("CertificatePutOrganizationDetails: %v", err)
	}

	parsedResponse := &CertificatePutOrganizationDetailsOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/certificates/{id}/organization",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("CertificatePutOrganizationDetails: %v", err)
	}

	return parsedResponse, nil
}

// CertificatePutRenewal certificate put renewal API
func (a *Client) CertificatePutRenewal(params CertificatePutRenewalParams) (*CertificatePutRenewalNoContent, error) {

	// Set parameters
	results, err := WriteToRequestCertificatePutRenewalParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("PUT")
	if err != nil {
		return nil, fmt.Errorf("CertificatePutRenewal: %v", err)
	}

	parsedResponse := &CertificatePutRenewalNoContent{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/certificates/{id}/renew",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("CertificatePutRenewal: %v", err)
	}

	return parsedResponse, nil
}

// CertificatePutRetrigger certificate put retrigger API
func (a *Client) CertificatePutRetrigger(params CertificatePutRetriggerParams) (*CertificatePutRetriggerNoContent, error) {

	// Set parameters
	results, err := WriteToRequestCertificatePutRetriggerParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("PUT")
	if err != nil {
		return nil, fmt.Errorf("CertificatePutRetrigger: %v", err)
	}

	parsedResponse := &CertificatePutRetriggerNoContent{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/certificates/{id}/retrigger",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("CertificatePutRetrigger: %v", err)
	}

	return parsedResponse, nil
}

// CertificateUpdateRequestNotifications certificate update request notifications API
func (a *Client) CertificateUpdateRequestNotifications(params CertificateUpdateRequestNotificationsParams) (*CertificateUpdateRequestNotificationsOK, error) {

	// Set parameters
	results, err := WriteToRequestCertificateUpdateRequestNotificationsParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("PATCH")
	if err != nil {
		return nil, fmt.Errorf("CertificateUpdateRequestNotifications: %v", err)
	}

	parsedResponse := &CertificateUpdateRequestNotificationsOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/certificates/{id}/notifications",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("CertificateUpdateRequestNotifications: %v", err)
	}

	return parsedResponse, nil
}

type RequestParameters struct {
	QueryParams map[string]string
	PathParams  map[string]string
	Body        interface{}
}

func NewRequestParameters() *RequestParameters {
	return &RequestParameters{
		QueryParams: make(map[string]string),
		PathParams:  make(map[string]string),
	}
}
