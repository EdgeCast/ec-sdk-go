// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderValidation order validation
//
// swagger:model OrderValidation
type OrderValidation struct {

	// domain validations
	DomainValidations []*DomainValidation `json:"domain_validations"`

	// organization validation
	OrganizationValidation *OrganizationValidation `json:"organization_validation,omitempty"`

	// status
	// Enum: [Pending Issued Deleted Rejected Revoked Canceled AwaitingRenewal PendingRenewal Renewed PendingReissue AwaitingReissue PendingOrgUpdate OrgUpdated RenewalRejected ReissueRejected Expired AwaitingOrgUpdate]
	Status string `json:"status,omitempty"`
}

// Validate validates this order validation
func (m *OrderValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomainValidations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationValidation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderValidation) validateDomainValidations(formats strfmt.Registry) error {
	if swag.IsZero(m.DomainValidations) { // not required
		return nil
	}

	for i := 0; i < len(m.DomainValidations); i++ {
		if swag.IsZero(m.DomainValidations[i]) { // not required
			continue
		}

		if m.DomainValidations[i] != nil {
			if err := m.DomainValidations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("domain_validations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("domain_validations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderValidation) validateOrganizationValidation(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationValidation) { // not required
		return nil
	}

	if m.OrganizationValidation != nil {
		if err := m.OrganizationValidation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization_validation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organization_validation")
			}
			return err
		}
	}

	return nil
}

var orderValidationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Pending","Issued","Deleted","Rejected","Revoked","Canceled","AwaitingRenewal","PendingRenewal","Renewed","PendingReissue","AwaitingReissue","PendingOrgUpdate","OrgUpdated","RenewalRejected","ReissueRejected","Expired","AwaitingOrgUpdate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderValidationTypeStatusPropEnum = append(orderValidationTypeStatusPropEnum, v)
	}
}

const (

	// OrderValidationStatusPending captures enum value "Pending"
	OrderValidationStatusPending string = "Pending"

	// OrderValidationStatusIssued captures enum value "Issued"
	OrderValidationStatusIssued string = "Issued"

	// OrderValidationStatusDeleted captures enum value "Deleted"
	OrderValidationStatusDeleted string = "Deleted"

	// OrderValidationStatusRejected captures enum value "Rejected"
	OrderValidationStatusRejected string = "Rejected"

	// OrderValidationStatusRevoked captures enum value "Revoked"
	OrderValidationStatusRevoked string = "Revoked"

	// OrderValidationStatusCanceled captures enum value "Canceled"
	OrderValidationStatusCanceled string = "Canceled"

	// OrderValidationStatusAwaitingRenewal captures enum value "AwaitingRenewal"
	OrderValidationStatusAwaitingRenewal string = "AwaitingRenewal"

	// OrderValidationStatusPendingRenewal captures enum value "PendingRenewal"
	OrderValidationStatusPendingRenewal string = "PendingRenewal"

	// OrderValidationStatusRenewed captures enum value "Renewed"
	OrderValidationStatusRenewed string = "Renewed"

	// OrderValidationStatusPendingReissue captures enum value "PendingReissue"
	OrderValidationStatusPendingReissue string = "PendingReissue"

	// OrderValidationStatusAwaitingReissue captures enum value "AwaitingReissue"
	OrderValidationStatusAwaitingReissue string = "AwaitingReissue"

	// OrderValidationStatusPendingOrgUpdate captures enum value "PendingOrgUpdate"
	OrderValidationStatusPendingOrgUpdate string = "PendingOrgUpdate"

	// OrderValidationStatusOrgUpdated captures enum value "OrgUpdated"
	OrderValidationStatusOrgUpdated string = "OrgUpdated"

	// OrderValidationStatusRenewalRejected captures enum value "RenewalRejected"
	OrderValidationStatusRenewalRejected string = "RenewalRejected"

	// OrderValidationStatusReissueRejected captures enum value "ReissueRejected"
	OrderValidationStatusReissueRejected string = "ReissueRejected"

	// OrderValidationStatusExpired captures enum value "Expired"
	OrderValidationStatusExpired string = "Expired"

	// OrderValidationStatusAwaitingOrgUpdate captures enum value "AwaitingOrgUpdate"
	OrderValidationStatusAwaitingOrgUpdate string = "AwaitingOrgUpdate"
)

// prop value enum
func (m *OrderValidation) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, orderValidationTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrderValidation) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order validation based on the context it is used
func (m *OrderValidation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDomainValidations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganizationValidation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderValidation) contextValidateDomainValidations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DomainValidations); i++ {

		if m.DomainValidations[i] != nil {
			if err := m.DomainValidations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("domain_validations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("domain_validations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderValidation) contextValidateOrganizationValidation(ctx context.Context, formats strfmt.Registry) error {

	if m.OrganizationValidation != nil {
		if err := m.OrganizationValidation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization_validation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organization_validation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderValidation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderValidation) UnmarshalBinary(b []byte) error {
	var res OrderValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
