// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrganizationValidation organization validation
//
// swagger:model OrganizationValidation
type OrganizationValidation struct {

	// status
	// Enum: [Unknown Pending Rejected Approved NA]
	Status string `json:"status,omitempty"`

	// validation type
	// Enum: [None DV OV EV]
	ValidationType string `json:"validation_type,omitempty"`
}

// Validate validates this organization validation
func (m *OrganizationValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var organizationValidationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Pending","Rejected","Approved","NA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		organizationValidationTypeStatusPropEnum = append(organizationValidationTypeStatusPropEnum, v)
	}
}

const (

	// OrganizationValidationStatusUnknown captures enum value "Unknown"
	OrganizationValidationStatusUnknown string = "Unknown"

	// OrganizationValidationStatusPending captures enum value "Pending"
	OrganizationValidationStatusPending string = "Pending"

	// OrganizationValidationStatusRejected captures enum value "Rejected"
	OrganizationValidationStatusRejected string = "Rejected"

	// OrganizationValidationStatusApproved captures enum value "Approved"
	OrganizationValidationStatusApproved string = "Approved"

	// OrganizationValidationStatusNA captures enum value "NA"
	OrganizationValidationStatusNA string = "NA"
)

// prop value enum
func (m *OrganizationValidation) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, organizationValidationTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrganizationValidation) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var organizationValidationTypeValidationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","DV","OV","EV"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		organizationValidationTypeValidationTypePropEnum = append(organizationValidationTypeValidationTypePropEnum, v)
	}
}

const (

	// OrganizationValidationValidationTypeNone captures enum value "None"
	OrganizationValidationValidationTypeNone string = "None"

	// OrganizationValidationValidationTypeDV captures enum value "DV"
	OrganizationValidationValidationTypeDV string = "DV"

	// OrganizationValidationValidationTypeOV captures enum value "OV"
	OrganizationValidationValidationTypeOV string = "OV"

	// OrganizationValidationValidationTypeEV captures enum value "EV"
	OrganizationValidationValidationTypeEV string = "EV"
)

// prop value enum
func (m *OrganizationValidation) validateValidationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, organizationValidationTypeValidationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrganizationValidation) validateValidationType(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateValidationTypeEnum("validation_type", "body", m.ValidationType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this organization validation based on context it is used
func (m *OrganizationValidation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationValidation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationValidation) UnmarshalBinary(b []byte) error {
	var res OrganizationValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
