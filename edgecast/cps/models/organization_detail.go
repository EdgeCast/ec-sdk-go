// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OrganizationDetail organization detail
//
// swagger:model OrganizationDetail
type OrganizationDetail struct {

	// additional contacts
	AdditionalContacts []*OrganizationContact `json:"additional_contacts"`

	// city
	City string `json:"city,omitempty"`

	// company address
	CompanyAddress string `json:"company_address,omitempty"`

	// company address2
	CompanyAddress2 string `json:"company_address2,omitempty"`

	// company name
	CompanyName string `json:"company_name,omitempty"`

	// contact email
	ContactEmail string `json:"contact_email,omitempty"`

	// contact first name
	ContactFirstName string `json:"contact_first_name,omitempty"`

	// contact last name
	ContactLastName string `json:"contact_last_name,omitempty"`

	// contact phone
	ContactPhone string `json:"contact_phone,omitempty"`

	// contact title
	ContactTitle string `json:"contact_title,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// organizational unit
	OrganizationalUnit string `json:"organizational_unit,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// zip code
	ZipCode string `json:"zip_code,omitempty"`
}

// Validate validates this organization detail
func (m *OrganizationDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalContacts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationDetail) validateAdditionalContacts(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalContacts) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalContacts); i++ {
		if swag.IsZero(m.AdditionalContacts[i]) { // not required
			continue
		}

		if m.AdditionalContacts[i] != nil {
			if err := m.AdditionalContacts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additional_contacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("additional_contacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this organization detail based on the context it is used
func (m *OrganizationDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalContacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationDetail) contextValidateAdditionalContacts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdditionalContacts); i++ {

		if m.AdditionalContacts[i] != nil {
			if err := m.AdditionalContacts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additional_contacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("additional_contacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationDetail) UnmarshalBinary(b []byte) error {
	var res OrganizationDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
