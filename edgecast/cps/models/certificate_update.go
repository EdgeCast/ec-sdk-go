// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertificateUpdate certificate update
//
// swagger:model CertificateUpdate
type CertificateUpdate struct {

	// auto renew
	AutoRenew bool `json:"auto_renew,omitempty"`

	// certificate label
	CertificateLabel string `json:"certificate_label,omitempty"`

	// dcv method
	// Enum: [Email DnsCnameToken DnsTxtToken]
	DcvMethod string `json:"dcv_method,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// domains
	Domains []*DomainCreateUpdate `json:"domains"`
}

// Validate validates this certificate update
func (m *CertificateUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDcvMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomains(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var certificateUpdateTypeDcvMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Email","DnsCnameToken","DnsTxtToken"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		certificateUpdateTypeDcvMethodPropEnum = append(certificateUpdateTypeDcvMethodPropEnum, v)
	}
}

const (

	// CertificateUpdateDcvMethodEmail captures enum value "Email"
	CertificateUpdateDcvMethodEmail string = "Email"

	// CertificateUpdateDcvMethodDNSCnameToken captures enum value "DnsCnameToken"
	CertificateUpdateDcvMethodDNSCnameToken string = "DnsCnameToken"

	// CertificateUpdateDcvMethodDNSTxtToken captures enum value "DnsTxtToken"
	CertificateUpdateDcvMethodDNSTxtToken string = "DnsTxtToken"
)

// prop value enum
func (m *CertificateUpdate) validateDcvMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, certificateUpdateTypeDcvMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CertificateUpdate) validateDcvMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.DcvMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateDcvMethodEnum("dcv_method", "body", m.DcvMethod); err != nil {
		return err
	}

	return nil
}

func (m *CertificateUpdate) validateDomains(formats strfmt.Registry) error {
	if swag.IsZero(m.Domains) { // not required
		return nil
	}

	for i := 0; i < len(m.Domains); i++ {
		if swag.IsZero(m.Domains[i]) { // not required
			continue
		}

		if m.Domains[i] != nil {
			if err := m.Domains[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("domains" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("domains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this certificate update based on the context it is used
func (m *CertificateUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDomains(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateUpdate) contextValidateDomains(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Domains); i++ {

		if m.Domains[i] != nil {
			if err := m.Domains[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("domains" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("domains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateUpdate) UnmarshalBinary(b []byte) error {
	var res CertificateUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
