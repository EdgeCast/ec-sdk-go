// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

package appendix

// This file was generated by codegen-sdk-go.
// Any changes made to this file may be overwritten.

import (
	"fmt"

	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
)

// New creates a new appendix API client.
func New(c ecclient.APIClient, baseAPIURL string) ClientService {
	return &Client{c, baseAPIURL}
}

// Client for appendix API
type Client struct {
	client     ecclient.APIClient
	baseAPIURL string
}

// ClientService is the interface for Client methods
type ClientService interface {
	AppendixGet(params AppendixGetParams) (*AppendixGetOK, error)

	AppendixGetCancelActions(params AppendixGetCancelActionsParams) (*AppendixGetCancelActionsOK, error)

	AppendixGetCertificateAuthorities(params AppendixGetCertificateAuthoritiesParams) (*AppendixGetCertificateAuthoritiesOK, error)

	AppendixGetCertificateStatuses(params AppendixGetCertificateStatusesParams) (*AppendixGetCertificateStatusesOK, error)

	AppendixGetDcvTypes(params AppendixGetDcvTypesParams) (*AppendixGetDcvTypesOK, error)

	AppendixGetDomainStatuses(params AppendixGetDomainStatusesParams) (*AppendixGetDomainStatusesOK, error)

	AppendixGetOrderStatuses(params AppendixGetOrderStatusesParams) (*AppendixGetOrderStatusesOK, error)

	AppendixGetProductTypes(params AppendixGetProductTypesParams) (*AppendixGetProductTypesOK, error)

	AppendixGetRequestType(params AppendixGetRequestTypeParams) (*AppendixGetRequestTypeOK, error)

	AppendixGetValidationStatuses(params AppendixGetValidationStatusesParams) (*AppendixGetValidationStatusesOK, error)

	AppendixGetValidationTypes(params AppendixGetValidationTypesParams) (*AppendixGetValidationTypesOK, error)
}

// AppendixGet appendix get API
func (a *Client) AppendixGet(params AppendixGetParams) (*AppendixGetOK, error) {

	// Set parameters
	results, err := WriteToRequestAppendixGetParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("AppendixGet: %v", err)
	}

	parsedResponse := &AppendixGetOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/appendix/country-codes",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("AppendixGet: %v", err)
	}

	return parsedResponse, nil
}

// AppendixGetCancelActions appendix get cancel actions API
func (a *Client) AppendixGetCancelActions(params AppendixGetCancelActionsParams) (*AppendixGetCancelActionsOK, error) {

	// Set parameters
	results, err := WriteToRequestAppendixGetCancelActionsParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("AppendixGetCancelActions: %v", err)
	}

	parsedResponse := &AppendixGetCancelActionsOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/appendix/cancel-actions",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("AppendixGetCancelActions: %v", err)
	}

	return parsedResponse, nil
}

// AppendixGetCertificateAuthorities appendix get certificate authorities API
func (a *Client) AppendixGetCertificateAuthorities(params AppendixGetCertificateAuthoritiesParams) (*AppendixGetCertificateAuthoritiesOK, error) {

	// Set parameters
	results, err := WriteToRequestAppendixGetCertificateAuthoritiesParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("AppendixGetCertificateAuthorities: %v", err)
	}

	parsedResponse := &AppendixGetCertificateAuthoritiesOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/appendix/certificate-authorities",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("AppendixGetCertificateAuthorities: %v", err)
	}

	return parsedResponse, nil
}

// AppendixGetCertificateStatuses appendix get certificate statuses API
func (a *Client) AppendixGetCertificateStatuses(params AppendixGetCertificateStatusesParams) (*AppendixGetCertificateStatusesOK, error) {

	// Set parameters
	results, err := WriteToRequestAppendixGetCertificateStatusesParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("AppendixGetCertificateStatuses: %v", err)
	}

	parsedResponse := &AppendixGetCertificateStatusesOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/appendix/certificate-statuses",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("AppendixGetCertificateStatuses: %v", err)
	}

	return parsedResponse, nil
}

// AppendixGetDcvTypes appendix get dcv types API
func (a *Client) AppendixGetDcvTypes(params AppendixGetDcvTypesParams) (*AppendixGetDcvTypesOK, error) {

	// Set parameters
	results, err := WriteToRequestAppendixGetDcvTypesParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("AppendixGetDcvTypes: %v", err)
	}

	parsedResponse := &AppendixGetDcvTypesOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/appendix/dcv-types",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("AppendixGetDcvTypes: %v", err)
	}

	return parsedResponse, nil
}

// AppendixGetDomainStatuses appendix get domain statuses API
func (a *Client) AppendixGetDomainStatuses(params AppendixGetDomainStatusesParams) (*AppendixGetDomainStatusesOK, error) {

	// Set parameters
	results, err := WriteToRequestAppendixGetDomainStatusesParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("AppendixGetDomainStatuses: %v", err)
	}

	parsedResponse := &AppendixGetDomainStatusesOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/appendix/domain-statuses",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("AppendixGetDomainStatuses: %v", err)
	}

	return parsedResponse, nil
}

// AppendixGetOrderStatuses appendix get order statuses API
func (a *Client) AppendixGetOrderStatuses(params AppendixGetOrderStatusesParams) (*AppendixGetOrderStatusesOK, error) {

	// Set parameters
	results, err := WriteToRequestAppendixGetOrderStatusesParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("AppendixGetOrderStatuses: %v", err)
	}

	parsedResponse := &AppendixGetOrderStatusesOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/appendix/order-statuses",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("AppendixGetOrderStatuses: %v", err)
	}

	return parsedResponse, nil
}

// AppendixGetProductTypes appendix get product types API
func (a *Client) AppendixGetProductTypes(params AppendixGetProductTypesParams) (*AppendixGetProductTypesOK, error) {

	// Set parameters
	results, err := WriteToRequestAppendixGetProductTypesParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("AppendixGetProductTypes: %v", err)
	}

	parsedResponse := &AppendixGetProductTypesOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/appendix/product-types",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("AppendixGetProductTypes: %v", err)
	}

	return parsedResponse, nil
}

// AppendixGetRequestType appendix get request type API
func (a *Client) AppendixGetRequestType(params AppendixGetRequestTypeParams) (*AppendixGetRequestTypeOK, error) {

	// Set parameters
	results, err := WriteToRequestAppendixGetRequestTypeParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("AppendixGetRequestType: %v", err)
	}

	parsedResponse := &AppendixGetRequestTypeOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/appendix/request-types",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("AppendixGetRequestType: %v", err)
	}

	return parsedResponse, nil
}

// AppendixGetValidationStatuses appendix get validation statuses API
func (a *Client) AppendixGetValidationStatuses(params AppendixGetValidationStatusesParams) (*AppendixGetValidationStatusesOK, error) {

	// Set parameters
	results, err := WriteToRequestAppendixGetValidationStatusesParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("AppendixGetValidationStatuses: %v", err)
	}

	parsedResponse := &AppendixGetValidationStatusesOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/appendix/validation-statuses",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("AppendixGetValidationStatuses: %v", err)
	}

	return parsedResponse, nil
}

// AppendixGetValidationTypes appendix get validation types API
func (a *Client) AppendixGetValidationTypes(params AppendixGetValidationTypesParams) (*AppendixGetValidationTypesOK, error) {

	// Set parameters
	results, err := WriteToRequestAppendixGetValidationTypesParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("AppendixGetValidationTypes: %v", err)
	}

	parsedResponse := &AppendixGetValidationTypesOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/appendix/validation-types",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("AppendixGetValidationTypes: %v", err)
	}

	return parsedResponse, nil
}

type RequestParameters struct {
	QueryParams map[string]string
	PathParams  map[string]string
	Body        interface{}
}

func NewRequestParameters() *RequestParameters {
	return &RequestParameters{
		QueryParams: make(map[string]string),
		PathParams:  make(map[string]string),
	}
}
