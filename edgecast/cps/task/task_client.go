// Copyright 2022 Edgecast Inc., Licensed under the terms of the Apache 2.0
// license. See LICENSE file in project root for terms.

package task

// This file was generated by codegen-sdk-go.
// Any changes made to this file may be overwritten.

import (
	"fmt"

	"github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
)

// New creates a new task API client.
func New(c ecclient.APIClient, baseAPIURL string) ClientService {
	return &Client{c, baseAPIURL}
}

// Client for task API
type Client struct {
	client     ecclient.APIClient
	baseAPIURL string
}

// ClientService is the interface for Client methods
type ClientService interface {
	TaskDelete(params TaskDeleteParams) (*TaskDeleteNoContent, error)

	TaskGet(params TaskGetParams) (*TaskGetOK, error)

	TaskGetByStatus(params TaskGetByStatusParams) (*TaskGetByStatusOK, error)

	TaskPost(params TaskPostParams) (*TaskPostCreated, error)
}

// TaskDelete task delete API
func (a *Client) TaskDelete(params TaskDeleteParams) (*TaskDeleteNoContent, error) {

	// Set parameters
	results, err := WriteToRequestTaskDeleteParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("DELETE")
	if err != nil {
		return nil, fmt.Errorf("TaskDelete: %v", err)
	}

	parsedResponse := &TaskDeleteNoContent{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/tasks/{id}",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("TaskDelete: %v", err)
	}

	return parsedResponse, nil
}

// TaskGet task get API
func (a *Client) TaskGet(params TaskGetParams) (*TaskGetOK, error) {

	// Set parameters
	results, err := WriteToRequestTaskGetParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("TaskGet: %v", err)
	}

	parsedResponse := &TaskGetOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/tasks/{id}",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("TaskGet: %v", err)
	}

	return parsedResponse, nil
}

// TaskGetByStatus task get by status API
func (a *Client) TaskGetByStatus(params TaskGetByStatusParams) (*TaskGetByStatusOK, error) {

	// Set parameters
	results, err := WriteToRequestTaskGetByStatusParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("GET")
	if err != nil {
		return nil, fmt.Errorf("TaskGetByStatus: %v", err)
	}

	parsedResponse := &TaskGetByStatusOK{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/tasks",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("TaskGetByStatus: %v", err)
	}

	return parsedResponse, nil
}

// TaskPost task post API
func (a *Client) TaskPost(params TaskPostParams) (*TaskPostCreated, error) {

	// Set parameters
	results, err := WriteToRequestTaskPostParams(params)
	if err != nil {
		return nil, err
	}

	method, err := ecclient.ToHTTPMethod("POST")
	if err != nil {
		return nil, fmt.Errorf("TaskPost: %v", err)
	}

	parsedResponse := &TaskPostCreated{}

	_, err = a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.baseAPIURL + "/v2.0/tasks",
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
		ParsedResponse: parsedResponse,
	})

	if err != nil {
		return nil, fmt.Errorf("TaskPost: %v", err)
	}

	return parsedResponse, nil
}

type RequestParameters struct {
	QueryParams map[string]string
	PathParams  map[string]string
	Body        interface{}
}

func NewRequestParameters() *RequestParameters {
	return &RequestParameters{
		QueryParams: make(map[string]string),
		PathParams:  make(map[string]string),
	}
}
