// Code generated by go-swagger; DO NOT EDIT.

package profiles_rl

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/EdgeCast/ec-sdk-go/rtldmodels"
)

// ProfilesRlGetCustomerSettingsByIDReader is a Reader for the ProfilesRlGetCustomerSettingsByID structure.
type ProfilesRlGetCustomerSettingsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProfilesRlGetCustomerSettingsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProfilesRlGetCustomerSettingsByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProfilesRlGetCustomerSettingsByIDOK creates a ProfilesRlGetCustomerSettingsByIDOK with default headers values
func NewProfilesRlGetCustomerSettingsByIDOK() *ProfilesRlGetCustomerSettingsByIDOK {
	return &ProfilesRlGetCustomerSettingsByIDOK{}
}

/* ProfilesRlGetCustomerSettingsByIDOK describes a response with status code 200, with default header values.

Success
*/
type ProfilesRlGetCustomerSettingsByIDOK struct {
	Payload *rtldmodels.RateLimitingProfileDto
}

func (o *ProfilesRlGetCustomerSettingsByIDOK) Error() string {
	return fmt.Sprintf("[GET /v1.0/rl/profiles/{id}][%d] profilesRlGetCustomerSettingsByIdOK  %+v", 200, o.Payload)
}
func (o *ProfilesRlGetCustomerSettingsByIDOK) GetPayload() *rtldmodels.RateLimitingProfileDto {
	return o.Payload
}

func (o *ProfilesRlGetCustomerSettingsByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rtldmodels.RateLimitingProfileDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
