{{- define "clientresponse" }}
// New{{ pascalize .Name }} creates a {{ pascalize .Name }} with default headers values
func New{{ pascalize .Name }}({{ if eq .Code -1 }}code int{{ end }}{{ if .Schema }}{{ if and (eq .Code -1) .Schema.IsStream }}, {{end}}{{ if .Schema.IsStream }}writer io.Writer{{ end }}{{ end }}) *{{ pascalize .Name }} {
  {{- if .Headers.HasSomeDefaults }}
  var (
  // initialize headers with default values
    {{- range .Headers }}
      {{- if .HasDefault }}
        {{ template "simpleschemaDefaultsvar" . }}
       {{- end }}
    {{- end }}
  )
    {{- range .Headers }}
      {{- if .HasDefault }}
        {{ template "simpleschemaDefaultsinit" . }}
      {{- end }}
    {{- end }}
  {{- end }}
  return &{{ pascalize .Name }}{
    {{- if eq .Code -1 }}
    _statusCode: code,
    {{- end }}
    {{ range .Headers }}
      {{- if .HasDefault }}
    {{ pascalize .Name}}: {{ if and (not .IsArray) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) .IsNullable }}&{{ end }}{{ varname .ID }}Default,
      {{- end }}
    {{- end }}
    {{- if .Schema }}
      {{- if .Schema.IsStream }}
    Payload: writer,
      {{- end }}
    {{- end }}
    }
}

/* {{ pascalize .Name}} describes a response with status code {{ .Code }}, with default header values.

 {{ if .Description }}{{ blockcomment .Description }}{{else}}{{ pascalize .Name }} {{ humanize .Name }}{{end}}
 */
type {{ pascalize .Name }} struct {
  {{- if eq .Code -1 }}
  _statusCode int
  {{- end }}
  {{- range .Headers }}
    {{- if .Description }}

  /* {{ blockcomment .Description }}
     {{- if or .SwaggerFormat .Default }}
       {{ print "" }}
       {{- if .SwaggerFormat }}
     Format: {{ .SwaggerFormat }}
       {{- end }}
       {{- if .Default }}
     Default: {{ json .Default }}
       {{- end }}
     {{- end }}
  */
    {{- end }}
  {{ pascalize .Name }} {{ .GoType }}
  {{- end }}
  {{- if .Schema }}

  {{ if and (not .Schema.IsBaseType) (not .Schema.IsInterface) .Schema.IsComplexObject (not .Schema.IsStream) }}{{ end }}{{ if (not .Schema.IsStream) }}{{ .Schema.GoType }}{{ else }}io.Writer{{end}}
  {{- end }}
}

{{- end }}
// Copyright 2021 Edgecast Inc., Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms.

package {{ .Package }}

// This file was generated by codegen-sdk-go.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  {{ imports .DefaultImports }}
  {{ imports .Imports }}
)

{{ range .Responses }}
  {{ template "clientresponse" . }}
{{ end }}
{{ if .DefaultResponse }}
  {{ template "clientresponse" .DefaultResponse }}
{{ end }}

{{ range .ExtraSchemas }}
/*{{ pascalize .Name }} {{ template "docstring" . }}
swagger:model {{ .Name }}
*/
  {{- template "schema" . }}
{{- end }}

{{- define "sliceclientheaderbinder" }}
 {{- if .IsArray }}
 var (
   {{ varname .Child.ValueExpression }}C {{ .GoType }}
 )
 // {{ .Child.ItemsDepth }}CollectionFormat: {{ printf "%q" .CollectionFormat }}
 {{ varname .Child.ValueExpression }}R := swag.SplitByFormat({{ varname .Child.ValueExpression }}V, {{ printf "%q" .CollectionFormat }})

 for {{ if or .Child.IsCustomFormatter .Child.Converter }}{{ .IndexVar }}{{ else }}_{{ end }}, {{ varname .Child.ValueExpression }}IV := range {{ varname .Child.ValueExpression }}R {
   {{ template "sliceclientheaderbinder" .Child }}
   {{ varname .Child.ValueExpression }}C = append({{ varname .Child.ValueExpression }}C, {{ varname .Child.ValueExpression }}IC) // roll-up {{ .Child.GoType }} into {{ .GoType }}
 }

 {{- else }}
   // convert split string to {{ .GoType }}
   {{- if .IsCustomFormatter }}
 val, err := formats.Parse({{ printf "%q" .SwaggerFormat }}, {{ varname .ValueExpression }}IV)
 if err != nil {
   return nil, errors.InvalidType({{ .Path }}, "header{{ .ItemsDepth }}", "{{ .GoType }}", {{ varname .ValueExpression }}IV)
 }
     {{- if .IsNullable }}
 {{ varname .ValueExpression }}IC := (&val).(*{{ .GoType }})
     {{- else }}
 {{ varname .ValueExpression }}IC := val.({{ .GoType }})
     {{- end }}
   {{- else if .Converter }}
 val, err := {{- print " "}}{{ .Converter }}({{ varname .ValueExpression }}IV)
 if err != nil {
   return nil, errors.InvalidType({{ .Path }}, "header{{ .ItemsDepth }}", "{{ .GoType }}", {{ varname .ValueExpression }}IV)
 }
     {{- if .IsNullable }}
 {{ varname .ValueExpression }}IC := &val
     {{- else }}
 {{ varname .ValueExpression }}IC := val
     {{- end }}
   {{- else }}
   {{ varname .ValueExpression }}IC :=
     {{- if eq .GoType "string" }}
       {{- print " " }}{{ varname .ValueExpression }}IV
     {{- else }}
       {{- print " " }}fmt.Sprintf("%v", {{ varname .ValueExpression }}IV)
     {{- end }} // string as {{ .GoType }}
   {{- end }}
 {{- end }}
{{- end }}