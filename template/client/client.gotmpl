// Copyright 2021 Edgecast Inc., Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms.

package {{ .Name }}

// This file was generated by codegen-sdk-go.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  "fmt"

  "github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"

  {{ imports .DefaultImports }}
  {{ imports .Imports }}
)

// New creates a new {{ humanize .Name }} API client.
func New(c ecclient.APIClient, cc ecclient.ClientConfig) ClientService {
  return &Client{c, cc}
}

/*
Client {{ if .Summary }}{{ .Summary }}{{ if .Description }}

{{ blockcomment .Description }}{{ end }}{{ else if .Description}}{{ blockcomment .Description }}{{ else }}for {{ humanize .Name }} API{{ end }}
*/
type Client struct {
  client ecclient.APIClient
	config ecclient.ClientConfig
}


// ClientService is the interface for Client methods
type ClientService interface {
	{{ range .Operations }}
	{{ pascalize .Name }}(params *{{ pascalize .Name }}Params{{ if .Authorized }}{{end}}{{ if .HasStreamingResponse }}, writer io.Writer{{ end }}) {{ if .SuccessResponse }}({{ range .SuccessResponses }}*{{ pascalize .Name }}, {{ end }}{{ end }}error{{ if .SuccessResponse }}){{ end }}
	{{ end }}
}



{{ range .Operations }}
/*
  {{ pascalize .Name }} {{ if .Summary }}{{ pluralizeFirstWord (humanize .Summary) }}{{ if .Description }}

  {{ blockcomment .Description }}{{ end }}{{ else if .Description}}{{ blockcomment .Description }}{{ else }}{{ humanize .Name }} API{{ end }}
*/
func (a *Client) {{ pascalize .Name }}(params *{{ pascalize .Name }}Params{{ if .Authorized }}{{end}}{{ if .HasStreamingResponse }}, writer io.Writer{{ end }}) {{ if .SuccessResponse }}({{ range .SuccessResponses }}*{{ pascalize .Name }}, {{ end }}{{ end }}error{{ if .SuccessResponse }}){{ end }} {
  // Validate the params before sending
  if params == nil {
    params = New{{ pascalize .Name }}Params()
  }

  //Set parameters
	results, err := WriteToRequest{{ pascalize .Name }}Params(params)
	if err != nil {
		return {{ if .SuccessResponse }}nil,{{ end }} err
	}

  method, err := ecclient.ToHTTPMethod({{ printf "%q" .Method }})
	if err != nil {
		return nil, fmt.Errorf("{{ pascalize .Name }}: %v", err)
	}

  {{ $length := len .SuccessResponses }}
  {{ if .SuccessResponse }}parsedResponse := &{{ pascalize .SuccessResponse.Name }}{}
  {{ end }}
	_, respErr := a.client.SubmitRequest(ecclient.SubmitRequestParams{
		Method:         method,
		Path:           a.config.BaseAPIURL.String() + {{ printf "%q" .Path }},
		RawBody:        results.Body,
		PathParams:     results.PathParams,
		QueryParams:    results.QueryParams,
    {{ $length := len .SuccessResponses }}{{ if .SuccessResponse }}ParsedResponse : parsedResponse,{{ end }}
	})

	if respErr != nil {
		return nil, fmt.Errorf("{{ pascalize .Name }}: %v", respErr)
	}
  
 return {{if .SuccessResponse }}parsedResponse,{{ end }} nil
}
{{- end }}


type RequestParameters struct {
	QueryParams map[string]string
	PathParams  map[string]string
	Body        interface{}
}

func NewRequestParameters() *RequestParameters {
	return &RequestParameters{
		QueryParams: make(map[string]string),
		PathParams:  make(map[string]string),
	}
}