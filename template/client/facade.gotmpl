// Copyright 2021 Edgecast Inc., Licensed under the terms of the Apache 2.0 license. See LICENSE file in project root for terms.


package {{ .Package }}

// This file was generated by codegen-sdk-go.
// Editing this file might prove futile when you re-run the swagger generate command


import (

  "fmt"
  "net/url"

  "github.com/EdgeCast/ec-sdk-go/edgecast"
  "github.com/EdgeCast/ec-sdk-go/edgecast/eclog"
  "github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecauth"
  "github.com/EdgeCast/ec-sdk-go/edgecast/internal/ecclient"
  
  {{ imports .DefaultImports }}
  {{ imports .Imports }}

)

const (
    // DefaultHost is the default Host
    // found in Meta (info) section of spec file
    DefaultHost string = {{ printf "%#v" .Host }}
    // DefaultBasePath is the default BasePath
    // found in Meta (info) section of spec file
    DefaultBasePath string = {{ printf "%#v" .BasePath }}
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = {{ printf "%#v" .Schemes }}

//New creates a new {{ humanize .Name }} client
func New(config edgecast.SDKConfig) (*{{ pascalize .Package }}Service, error) {
  
  apiURL, err := url.Parse(config.BaseAPIURL.String() + DefaultBasePath)
  if err != nil {
    return nil, fmt.Errorf("{{ pascalize .Package }}Service.New(): %v", err)
  }

  // OAuth2 authentication
  authProvider, err := ecauth.NewIDSAuthorizationProvider(config.BaseIDSURL, ecauth.OAuth2Credentials(config.IDSCredentials))
  if err != nil {

    //Token authentication
    authTokenProvider, err := ecauth.NewTokenAuthorizationProvider(config.APIToken)
    if err != nil {
      return nil, fmt.Errorf("{{ pascalize .Package }}Service.New(): %v", err)
    }
    c := ecclient.New(ecclient.ClientConfig{
      BaseAPIURL:   *apiURL,
      UserAgent:    config.UserAgent,
      Logger:       config.Logger,
      AuthProvider: authTokenProvider,
    })

    return &{{ pascalize .Package }}Service{
      client: c,
      Logger: config.Logger,
      {{- range .OperationGroups }}
      {{ pascalize .Name }}: {{ .PackageAlias }}.New(c, c.Config.BaseAPIURL.String()),
      {{- end }}
    }, nil

  } else {
    
    c := ecclient.New(ecclient.ClientConfig{
      BaseAPIURL:   *apiURL,
      UserAgent:    config.UserAgent,
      Logger:       config.Logger,
      AuthProvider: authProvider,
    })

    return &{{ pascalize .Package }}Service{
      client: c,
      Logger: config.Logger,
      {{- range .OperationGroups }}
      {{ pascalize .Name }}: {{ .PackageAlias }}.New(c, c.Config.BaseAPIURL.String()),
      {{- end }}
    }, nil
  }
}

// {{ pascalize .Package }}Service is a client for {{ humanize .Name }}
type {{ pascalize .Package }}Service struct {
  {{ range .OperationGroups }}
    {{ pascalize .Name }} {{ .PackageAlias }}.ClientService
  {{ end }}
  
  client ecclient.APIClient

  clientConfig ecclient.ClientConfig

  Logger eclog.Logger
}