// Code generated by go-swagger; DO NOT EDIT.

package rtldmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FilterConditions filter conditions
//
// swagger:model FilterConditions
type FilterConditions string

func NewFilterConditions(value FilterConditions) *FilterConditions {
	v := value
	return &v
}

const (

	// FilterConditionsIn captures enum value "in"
	FilterConditionsIn FilterConditions = "in"

	// FilterConditionsNotIn captures enum value "not_in"
	FilterConditionsNotIn FilterConditions = "not_in"
)

// for schema
var filterConditionsEnum []interface{}

func init() {
	var res []FilterConditions
	if err := json.Unmarshal([]byte(`["in","not_in"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filterConditionsEnum = append(filterConditionsEnum, v)
	}
}

func (m FilterConditions) validateFilterConditionsEnum(path, location string, value FilterConditions) error {
	if err := validate.EnumCase(path, location, value, filterConditionsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this filter conditions
func (m FilterConditions) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFilterConditionsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this filter conditions based on context it is used
func (m FilterConditions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
